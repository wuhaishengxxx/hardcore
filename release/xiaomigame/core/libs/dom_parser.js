function DOMParser(a) { this.options = a || { locator: {} } } function buildErrorHandler(a, b, d) { function c(b) { var c = a[b]; !c && h && (c = 2 == a.length ? function (c) { a(b, c) } : a); f[b] = c && function (a) { c("[xmldom " + b + "]\t" + a + _locator(d)) } || function () { } } if (!a) { if (b instanceof DOMHandler) return b; a = b } var f = {}, h = a instanceof Function; return d = d || {}, c("warning"), c("error"), c("fatalError"), f } function DOMHandler() { this.cdata = !1 } function position(a, b) { b.lineNumber = a.lineNumber; b.columnNumber = a.columnNumber } function _locator(a) { return a ? "\n@" + (a.systemId || "") + "#[line:" + a.lineNumber + ",col:" + a.columnNumber + "]" : void 0 } function _toString(a, b, d) { return "string" == typeof a ? a.substr(b, d) : a.length >= b + d || b ? new java.lang.String(a, b, d) + "" : a } function appendElement(a, b) { a.currentElement ? a.currentElement.appendChild(b) : a.doc.appendChild(b) } DOMParser.prototype.parseFromString = function (a, b) { var d = this.options, c = new XMLReader, f = d.domBuilder || new DOMHandler, h = d.errorHandler, e = d.locator, g = d.xmlns || {}, k = { lt: "\x3c", gt: "\x3e", amp: "\x26", quot: '"', apos: "'" }; return e && f.setDocumentLocator(e), c.errorHandler = buildErrorHandler(h, f, e), c.domBuilder = d.domBuilder || f, /\/x?html?$/.test(b) && (k.nbsp = "\u00a0", k.copy = "\u00a9", g[""] = "http://www.w3.org/1999/xhtml"), g.xml = g.xml || "http://www.w3.org/XML/1998/namespace", a ? c.parse(a, g, k) : c.errorHandler.error("invalid doc source"), f.doc }; DOMHandler.prototype = { startDocument: function () { this.doc = (new DOMImplementation).createDocument(null, null, null); this.locator && (this.doc.documentURI = this.locator.systemId) }, startElement: function (a, b, d, c) { var f = this.doc; b = f.createElementNS(a, d || b); var h = c.length; appendElement(this, b); this.currentElement = b; this.locator && position(this.locator, b); for (var e = 0; h > e; e++) { a = c.getURI(e); var g = c.getValue(e); d = c.getQName(e); a = f.createAttributeNS(a, d); this.locator && position(c.getLocator(e), a); a.value = a.nodeValue = g; b.setAttributeNode(a) } }, endElement: function () { var a = this.currentElement; a.tagName; this.currentElement = a.parentNode }, startPrefixMapping: function () { }, endPrefixMapping: function () { }, processingInstruction: function (a, b) { a = this.doc.createProcessingInstruction(a, b); this.locator && position(this.locator, a); appendElement(this, a) }, ignorableWhitespace: function () { }, characters: function (a) { if (a = _toString.apply(this, arguments)) { var b = this.cdata ? this.doc.createCDATASection(a) : this.doc.createTextNode(a); this.currentElement ? this.currentElement.appendChild(b) : /^\s*$/.test(a) && this.doc.appendChild(b); this.locator && position(this.locator, b) } }, skippedEntity: function () { }, endDocument: function () { this.doc.normalize() }, setDocumentLocator: function (a) { (this.locator = a) && (a.lineNumber = 0) }, comment: function (a) { a = _toString.apply(this, arguments); var b = this.doc.createComment(a); this.locator && position(this.locator, b); appendElement(this, b) }, startCDATA: function () { this.cdata = !0 }, endCDATA: function () { this.cdata = !1 }, startDTD: function (a, b, d) { var c = this.doc.implementation; c && c.createDocumentType && (a = c.createDocumentType(a, b, d), this.locator && position(this.locator, a), appendElement(this, a)) }, warning: function (a) { console.warn("[xmldom warning]\t" + a, _locator(this.locator)) }, error: function (a) { console.error("[xmldom error]\t" + a, _locator(this.locator)) }, fatalError: function (a) { throw console.error("[xmldom fatalError]\t" + a, _locator(this.locator)), a; } }; "endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g, function (a) { DOMHandler.prototype[a] = function () { return null } }); var XMLReader = require("./sax").XMLReader, DOMImplementation = exports.DOMImplementation = require("./dom").DOMImplementation; exports.XMLSerializer = require("./dom").XMLSerializer; exports.DOMParser = DOMParser;